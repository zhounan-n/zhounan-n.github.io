<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>zonway</title>
  
  <subtitle>一点一滴</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://www.zhoun.site/"/>
  <updated>2018-04-01T13:36:35.173Z</updated>
  <id>http://www.zhoun.site/</id>
  
  <author>
    <name>周楠</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>java单点登录的实现</title>
    <link href="http://www.zhoun.site/2018/04/01/sso/"/>
    <id>http://www.zhoun.site/2018/04/01/sso/</id>
    <published>2018-04-01T13:14:32.000Z</published>
    <updated>2018-04-01T13:36:35.173Z</updated>
    
    <content type="html"><![CDATA[<hr><blockquote><ul><li>什么单点登录</li><li>单点登录的好处</li><li>单点登录的实现</li></ul></blockquote><h3 id="单点登录的概念"><a href="#单点登录的概念" class="headerlink" title="单点登录的概念"></a>单点登录的概念</h3><blockquote><p>简单地说，单点登录就是面对集群多个server之间，有一个server登录了，其他server也一起登录了</p></blockquote><a id="more"></a><hr><h3 id="单点登录的好处"><a href="#单点登录的好处" class="headerlink" title="单点登录的好处"></a>单点登录的好处</h3><blockquote><p>用户不用进行多次登陆，身份认证中间流转打通子系统，降低安全和管理的风险，应对面向服务的架构，分布式集群，不同步服务部署在不同的服务器上的情况</p></blockquote><h3 id="单点登录的实现"><a href="#单点登录的实现" class="headerlink" title="单点登录的实现"></a>单点登录的实现</h3><blockquote><p>通过redis存储token来进行身份的认证</p></blockquote><p>具体实现步骤：<br>1：登录接口，接受密码进行比对，是否存在该用户，密码是否正确，生成token(可以用jwt)，用redis将token信息作为key的一部分，value存放用户信息,redis设置过期时间。将token写入cookie(浏览器关闭自动退出),返回token</p><p>2: 拦截器接收cookie,根据token获取用户信息(没有token或者从redis中获取不到对应的信息则需要重新登录)，获取到用户则刷新redis失效时间</p><p>3：手动退出,清空redis</p><p>(认证作为单独的一个服务，其他服务接收到token用它调用认证服务器认证信息)</p>]]></content>
    
    <summary type="html">
    
      &lt;hr&gt;
&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;什么单点登录&lt;/li&gt;
&lt;li&gt;单点登录的好处&lt;/li&gt;
&lt;li&gt;单点登录的实现&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;h3 id=&quot;单点登录的概念&quot;&gt;&lt;a href=&quot;#单点登录的概念&quot; class=&quot;headerlink&quot; title=&quot;单点登录的概念&quot;&gt;&lt;/a&gt;单点登录的概念&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;简单地说，单点登录就是面对集群多个server之间，有一个server登录了，其他server也一起登录了&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="sso" scheme="http://www.zhoun.site/categories/sso/"/>
    
    
      <category term="sso" scheme="http://www.zhoun.site/tags/sso/"/>
    
  </entry>
  
  <entry>
    <title>redis集群搭建</title>
    <link href="http://www.zhoun.site/2018/03/26/redis1/"/>
    <id>http://www.zhoun.site/2018/03/26/redis1/</id>
    <published>2018-03-26T13:24:01.000Z</published>
    <updated>2018-03-26T13:31:23.821Z</updated>
    
    <content type="html"><![CDATA[<p>redis集群搭建过程记录：</p><blockquote><ul><li>安装ruby</li><li>安装redis</li><li>单机模拟集群</li><li>启动</li></ul></blockquote><h3 id="ruby安装"><a href="#ruby安装" class="headerlink" title="ruby安装"></a>ruby安装</h3><p>在centos7系统上用yum安装的ruby默认是2.0版本的，需要升级。<br>升级方式：<br>gpg –keyserver hkp://keys.gnupg.net –recv-keys 409B6B1796C275462A1703113804BB82D39DC0E3 7D2BAF1CF37B13E2069D6956105BD0E739499BDB</p><a id="more"></a><p>\curl -sSL <a href="https://get.rvm.io" target="_blank" rel="external">https://get.rvm.io</a> | bash -s stable</p><p>source  /etc/profile.d/rvm.sh</p><p>rvm list known(可以查看版本)</p><p>rvm install 2.4.1</p><p>ruby -v<br>gem -v(查看安装的版本)</p><p>gem install redis(安装redis接口)</p><hr><h3 id="redis安装"><a href="#redis安装" class="headerlink" title="redis安装"></a>redis安装</h3><p>上传对应的redis包到相应的目录中(如/opt/redis/)<br>tar -zxvf (解压包)<br>cd redis(进入解压的目录)<br>make –prefix /usr/local/redis (安装到对应的目录)<br>make install</p><h3 id="集群模拟"><a href="#集群模拟" class="headerlink" title="集群模拟"></a>集群模拟</h3><p>cd /opt<br>mkdir redis-cluster<br>cd redis-cluster<br>mkdir -p 9001/data 9002/data 9003/data 9004/data 9005/data 9006/data<br>(9001-9006六个端口 模拟集群 主备 根据节点选取失败规则，最少3个，所有最少6个节点)</p><p>将redis安装目录bin下的文件拷贝到900X文件下(上面是安装到/usr/local/redis的目录中了)<br>将redis源码目录src下的redis-trib.rb拷贝到redis-cluster目录下<br>再将redis的配置文件复制到900X目录下</p><h3 id="集群启动"><a href="#集群启动" class="headerlink" title="集群启动"></a>集群启动</h3><p>进入到900x对应的目录下执行 ./redis-server ./redis.conf<br>启动遇到的错误：<br>1：WARNING overcommit_memory is set to 0! Background save may fail under low memory condition. To fix this issue add ‘vm.overcommit_memory = 1’ to /etc/sysctl.conf and then reboot or run the command ‘sysctl vm.overcommit_memory=1’ for this to take effect.<br>13891:M 26 Mar 15:41:00.353 # WARNING you have Transparent Huge Pages (THP) support enabled in your kernel. This will create latency and memory usage issues with Redis. To fix this issue run the command ‘echo never &gt; /sys/kernel/mm/transparent_hugepage/enabled’ as root, and add it to your /etc/rc.local in order to retain the setting after a reboot. Redis must be restarted after THP is disabled.</p><p>2:WARNING: The TCP backlog setting of 511 cannot be enforced because /proc/sys/net/core/somaxconn is set to the lower value of 128.</p><p>以上两个错误需要修改/etc/sysctl,加上以下两个东西。<br>vm.overcommit_memory = 1<br>net.core.somaxconn= 1024<br>启动就不会报这个错误了</p><p>启动6个节点后再设置集群：<br>进入到redis源码src目录下：<br>./redis-trib.rb create –replicas 1 192.168.101.3:7001 192.168.101.3:7002 192.168.101.3:7003 192.168.101.3:7004 192.168.101.3:7005  192.168.101.3:7006<br>执行以上命令设置集群</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;redis集群搭建过程记录：&lt;/p&gt;
&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;安装ruby&lt;/li&gt;
&lt;li&gt;安装redis&lt;/li&gt;
&lt;li&gt;单机模拟集群&lt;/li&gt;
&lt;li&gt;启动&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;h3 id=&quot;ruby安装&quot;&gt;&lt;a href=&quot;#ruby安装&quot; class=&quot;headerlink&quot; title=&quot;ruby安装&quot;&gt;&lt;/a&gt;ruby安装&lt;/h3&gt;&lt;p&gt;在centos7系统上用yum安装的ruby默认是2.0版本的，需要升级。&lt;br&gt;升级方式：&lt;br&gt;gpg –keyserver hkp://keys.gnupg.net –recv-keys 409B6B1796C275462A1703113804BB82D39DC0E3 7D2BAF1CF37B13E2069D6956105BD0E739499BDB&lt;/p&gt;
    
    </summary>
    
      <category term="redis" scheme="http://www.zhoun.site/categories/redis/"/>
    
    
      <category term="redis 集群" scheme="http://www.zhoun.site/tags/redis-%E9%9B%86%E7%BE%A4/"/>
    
  </entry>
  
  <entry>
    <title>java多线程之线程同步工具类总结</title>
    <link href="http://www.zhoun.site/2018/03/19/multithread1/"/>
    <id>http://www.zhoun.site/2018/03/19/multithread1/</id>
    <published>2018-03-19T13:09:46.000Z</published>
    <updated>2018-03-19T15:05:17.465Z</updated>
    
    <content type="html"><![CDATA[<hr><p>一本技术书看完不总结一下，总觉得没有把知识转换成自己的，所以总结是非常有必要的，忘了还可以回过头来看一看。</p><p>以下内容基本总结于java并发编程实战这本书，下面开始总结几种同步工具类。</p><blockquote><ul><li>闭锁</li><li>信号量</li><li>栅栏</li></ul></blockquote><h2 id="闭锁"><a href="#闭锁" class="headerlink" title="闭锁"></a>闭锁</h2><p>闭锁可以用来确保一些活动等待其他活动执行完成后再执行</p><h6 id="CountDownLatch是一种灵活的闭锁实现。它可以使一个或多个线程等待一组时间发生。await会一直阻塞到计数器为0。ountDown减少计数，相当于一个开关"><a href="#CountDownLatch是一种灵活的闭锁实现。它可以使一个或多个线程等待一组时间发生。await会一直阻塞到计数器为0。ountDown减少计数，相当于一个开关" class="headerlink" title="CountDownLatch是一种灵活的闭锁实现。它可以使一个或多个线程等待一组时间发生。await会一直阻塞到计数器为0。ountDown减少计数，相当于一个开关"></a><strong>CountDownLatch是一种灵活的闭锁实现。它可以使一个或多个线程等待一组时间发生。await会一直阻塞到计数器为0。ountDown减少计数，相当于一个开关</strong></h6><a id="more"></a><p>代码示例</p><pre><code>int threadCount = 10;final CountDownLatch countDownLatch = new CountDownLatch(threadCount);for (int i = 0; i &lt; threadCount; i++) {    new Thread(new Runnable() {        @Override        public void run() {            System.out.println(&quot;线程&quot; + Thread.currentThread().getId() + &quot;开始启动&quot;);            try {                Thread.sleep(1000);            } catch (Exception e) {                e.printStackTrace();            }            System.out.println(&quot;线程&quot; + Thread.currentThread() + &quot;已到达终点&quot;);            countDownLatch.countDown();        }    }).start();}try {    countDownLatch.await();} catch (Exception e) {    e.printStackTrace();}System.out.println(&quot;10个线程已计算完毕，开始计算排名&quot;);</code></pre><p>}</p><h6 id="FutureTask也可以做闭锁。-执行任务完毕后获取结果-仅在计算完成时才能获取结果，如果计算尚未完成则阻塞get方法，一旦计算完成就不能重新开始或取消计算"><a href="#FutureTask也可以做闭锁。-执行任务完毕后获取结果-仅在计算完成时才能获取结果，如果计算尚未完成则阻塞get方法，一旦计算完成就不能重新开始或取消计算" class="headerlink" title="FutureTask也可以做闭锁。(执行任务完毕后获取结果)仅在计算完成时才能获取结果，如果计算尚未完成则阻塞get方法，一旦计算完成就不能重新开始或取消计算"></a><strong>FutureTask也可以做闭锁。(执行任务完毕后获取结果)仅在计算完成时才能获取结果，如果计算尚未完成则阻塞get方法，一旦计算完成就不能重新开始或取消计算</strong></h6><p>FutureTak使用场景：（此处参考<a href="http://www.importnew.com/25286.html）" target="_blank" rel="external">http://www.importnew.com/25286.html）</a></p><p>1：利用FutureTask和ExecutorService,可以用多线程额方式提交计算任务，主线程继续执行其他任务，当主线程需要子线程的计算结果时再获取子线程的计算结果。</p><pre><code>public static void main(String[] args) {TestFutureTask inst = new TestFutureTask();//创建任务集合List&lt;FutureTask&lt;Integer&gt;&gt; taskList = new ArrayList&lt;FutureTask&lt;Integer&gt;&gt;();//创建线程池ExecutorService executorService = Executors.newFixedThreadPool(5);for (int i = 0; i &lt; 10; i++) {    //传入callable对象来创建FutureTask对象    FutureTask&lt;Integer&gt; ft = new FutureTask&lt;Integer&gt;(inst.new ComputeTask(i, i + &quot;&quot;));    taskList.add(ft);    //提交给线程池执行任务    executorService.submit(ft);}System.out.println(&quot;所有子线程提交完毕，主线程接着干其他事情&quot;);//开始计算各计算线程统计结果Integer totalResult = 0;for (FutureTask&lt;Integer&gt; futureTask : taskList) {    try {        //futureTask的get()方法会自动阻塞，知道获取计算结果为止        totalResult = totalResult + futureTask.get();    } catch (InterruptedException e) {        e.printStackTrace();    } catch (ExecutionException e2) {        e2.printStackTrace();    }}//关闭线程executorService.shutdown();System.out.println(&quot;多任务计算后的结果是：&quot; + totalResult);</code></pre><p>}</p><p>private class ComputeTask implements Callable {<br>    private Integer result = 0;<br>    private String taskName = “”;</p><pre><code>public ComputeTask(Integer initResult, String taskName) {    result = initResult;    this.taskName = taskName;    System.out.println(&quot;生成子线程计算任务：&quot; + taskName);}public String getTaskName() {    return this.taskName;}@Overridepublic Object call() throws Exception {    for (int i = 0; i &lt; 100; i++) {        result += i;    }    //休眠5秒钟，观察主线程行为，预期的结果是主线程会继续执行，到要取得FutureTask的结果直至等待完成    Thread.sleep(5000);    System.out.println(&quot;子线程计算任务：&quot; + taskName + &quot;计算完成&quot;);    return result;}</code></pre><p>}</p><p>2：FutureTask在高并发环境下确保任务只执行一次。<br>很多高并发环境下，某些任务我们往往只需要执行一次，这种使用场景FutureTask恰恰能胜任，假设一个带key的连接池，当key存在时，既直接返回一个带key的对象，当key不存在时则创建连接，这样的应用场景，通常采用的方法是使用一个map对象来存储key和对应连接池的关系。</p><pre><code> private ConcurrentHashMap&lt;String, FutureTask&lt;Connection&gt;&gt; connectionPool = new ConcurrentHashMap&lt;String, FutureTask&lt;Connection&gt;&gt;();public Connection getConnection(String key) throws Exception {    FutureTask&lt;Connection&gt; connectionFutureTask = connectionPool.get(key);    if (connectionFutureTask != null) {        return connectionFutureTask.get();    } else {        Callable&lt;Connection&gt; callable = new Callable&lt;Connection&gt;() {            @Override            public Connection call() throws Exception {                return createConnection();            }        };        FutureTask&lt;Connection&gt; newTask = new FutureTask&lt;Connection&gt;(callable);        connectionFutureTask = connectionPool.putIfAbsent(key, newTask);        if (connectionFutureTask == null) {            connectionFutureTask = newTask;            connectionFutureTask.run();        }        return connectionFutureTask.get();    }}private Connection createConnection() {    return null;}</code></pre><h2 id="信号量"><a href="#信号量" class="headerlink" title="信号量"></a><strong>信号量</strong></h2><p>计数信号量用来控制<strong>同时</strong>访问某个特定资源的<strong>操作数量</strong>，或者同时执行某个操作的指定数量。计数信号量还可以用来实现某种资源池，或者对容器施加边界。<br>acquire()从信号量获取一个许可，相似提供一个许可前一直将线程阻塞<br>release()释放给定数目的许可，将其返回到信号量</p><p>Semaphore可以用于做流量控制，特别公用资源有限的应用场景，比如数据库连接。假如有一个需求，要读取几万个文件的数据，因为都是IO密集型任务，我们可以启动几十个线程并发的读取，但是如果读到内存后，还需要存储到数据库中，而数据库的连接数只有10个，这时我们必须控制只有十个线程同时获取数据库连接保存数据，否则会报错无法获取数据库连接(参考<a href="http://annan211.iteye.com/blog/2115477" target="_blank" rel="external">http://annan211.iteye.com/blog/2115477</a>)</p><pre><code> private static final int THREAD_COUNT = 30;private static ExecutorService threadPool = new ThreadPoolExecutor(10, 20, 5, TimeUnit.SECONDS, new SynchronousQueue&lt;&gt;());private static Semaphore s = new Semaphore(10);public static void main(String[] args) {    for (int i = 0; i &lt; THREAD_COUNT; i++) {        final int num = i;        threadPool.execute(new Runnable() {            @Override            public void run() {                try {                    s.acquire();                    System.out.println(Thread.currentThread().getName() + &quot;--save data--&quot; + num);                    s.release();                } catch (InterruptedException e) {                }            }        });    }    threadPool.shutdown();}</code></pre><h2 id="栅栏：CyclicBarrier"><a href="#栅栏：CyclicBarrier" class="headerlink" title="栅栏：CyclicBarrier"></a><strong>栅栏：CyclicBarrier</strong></h2><p>栅栏类似于闭锁，它能阻塞一组线程知道某个事件发生，栅栏与闭锁的区别在于，所有线程必须同时到达栅栏位置，才能继续执行，闭锁用于等待事件，而栅栏用于等待其他线程    栅栏用于实现一些协议，例如几个家庭决定在某个地方集合，所有人6点碰头，到了以后等其他人，等人到齐了再商量下一步做什么。<br>await() 所有参与者在此barrier调用await()之前将一直等待<br>public CyclicBarrier(int parties)<br>public CyclicBarrier(int parties, Runnable barrierAction)<br>参数parties指定线程数量，当指定的线程值都到达栅栏点时，栅栏打开，线程恢复<br>当线程数量小于启动线程时，线程数量为10，第一个启动线程就会被阻塞。<br>第二个参数，在启动barrier时执行给定的屏障操作，该操作由最后一个进入barrier的线程执行</p><pre><code>public static void main(String[] args) {    ExecutorService executorService = Executors.newFixedThreadPool(5);    final CyclicBarrier barrier = new CyclicBarrier(5, new Runnable() {        public void run() {            System.out.println(&quot;所有玩家都已进入游戏&quot;);        }    });    for (int i = 0; i &lt; 5; i++) {        //executorService.submit();        executorService.execute(new Player(&quot;玩家&quot; + i, barrier));    }    executorService.shutdown();}private static class Player implements Runnable {    final String name;    final CyclicBarrier barrier;    public Player(String name, CyclicBarrier barrier) {        this.name = name;        this.barrier = barrier;    }    public void run() {        try {            TimeUnit.SECONDS.sleep(1 + (new Random().nextInt(3)));            System.out.println(name + &quot;已准备，等待其他玩家……&quot;);            barrier.await();            TimeUnit.SECONDS.sleep(1 + (new Random().nextInt(3)));            System.out.println(name + &quot;玩家已加入游戏&quot;);        } catch (InterruptedException e) {            System.out.println(name + &quot;离开游戏&quot;);        } catch (BrokenBarrierException e2) {            System.out.println(name + &quot;离开游戏&quot;);            e2.printStackTrace();        }    }}</code></pre>]]></content>
    
    <summary type="html">
    
      &lt;hr&gt;
&lt;p&gt;一本技术书看完不总结一下，总觉得没有把知识转换成自己的，所以总结是非常有必要的，忘了还可以回过头来看一看。&lt;/p&gt;
&lt;p&gt;以下内容基本总结于java并发编程实战这本书，下面开始总结几种同步工具类。&lt;/p&gt;
&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;闭锁&lt;/li&gt;
&lt;li&gt;信号量&lt;/li&gt;
&lt;li&gt;栅栏&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;闭锁&quot;&gt;&lt;a href=&quot;#闭锁&quot; class=&quot;headerlink&quot; title=&quot;闭锁&quot;&gt;&lt;/a&gt;闭锁&lt;/h2&gt;&lt;p&gt;闭锁可以用来确保一些活动等待其他活动执行完成后再执行&lt;/p&gt;
&lt;h6 id=&quot;CountDownLatch是一种灵活的闭锁实现。它可以使一个或多个线程等待一组时间发生。await会一直阻塞到计数器为0。ountDown减少计数，相当于一个开关&quot;&gt;&lt;a href=&quot;#CountDownLatch是一种灵活的闭锁实现。它可以使一个或多个线程等待一组时间发生。await会一直阻塞到计数器为0。ountDown减少计数，相当于一个开关&quot; class=&quot;headerlink&quot; title=&quot;CountDownLatch是一种灵活的闭锁实现。它可以使一个或多个线程等待一组时间发生。await会一直阻塞到计数器为0。ountDown减少计数，相当于一个开关&quot;&gt;&lt;/a&gt;&lt;strong&gt;CountDownLatch是一种灵活的闭锁实现。它可以使一个或多个线程等待一组时间发生。await会一直阻塞到计数器为0。ountDown减少计数，相当于一个开关&lt;/strong&gt;&lt;/h6&gt;
    
    </summary>
    
      <category term="java基础" scheme="http://www.zhoun.site/categories/java%E5%9F%BA%E7%A1%80/"/>
    
    
      <category term="多线程" scheme="http://www.zhoun.site/tags/%E5%A4%9A%E7%BA%BF%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>后台数据实时推送</title>
    <link href="http://www.zhoun.site/2018/02/09/websocket/"/>
    <id>http://www.zhoun.site/2018/02/09/websocket/</id>
    <published>2018-02-09T11:48:08.000Z</published>
    <updated>2018-02-28T06:42:08.096Z</updated>
    
    <content type="html"><![CDATA[<h4 id="本篇总结一下websocket后台数据实时推送"><a href="#本篇总结一下websocket后台数据实时推送" class="headerlink" title="本篇总结一下websocket后台数据实时推送"></a>本篇总结一下websocket后台数据实时推送</h4><h4 id="业务场景："><a href="#业务场景：" class="headerlink" title="业务场景："></a>业务场景：</h4><p>页面调用一个查询接口，后台同时调用多个三方接口返回数据，页面接收这些数据，因为效率上的考虑（具体效果怎么样，值不值得采用并不知道，有小伙伴比较了解的可以指点一二啊），后台调用多个接口使用多线程处理，并且将返回的数据用spring websocket实时推送到页面，后台将数据保存入库</p><h4 id="涉及知识点"><a href="#涉及知识点" class="headerlink" title="涉及知识点:"></a>涉及知识点:</h4><p>多线程，线程安全，spring websocket</p><p>spring websocket 在spring官网有完整的demo，这里就不赘述了，这里只简单的理下思路。<br><a id="more"></a></p>]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;本篇总结一下websocket后台数据实时推送&quot;&gt;&lt;a href=&quot;#本篇总结一下websocket后台数据实时推送&quot; class=&quot;headerlink&quot; title=&quot;本篇总结一下websocket后台数据实时推送&quot;&gt;&lt;/a&gt;本篇总结一下websocket后台数据实时推送&lt;/h4&gt;&lt;h4 id=&quot;业务场景：&quot;&gt;&lt;a href=&quot;#业务场景：&quot; class=&quot;headerlink&quot; title=&quot;业务场景：&quot;&gt;&lt;/a&gt;业务场景：&lt;/h4&gt;&lt;p&gt;页面调用一个查询接口，后台同时调用多个三方接口返回数据，页面接收这些数据，因为效率上的考虑（具体效果怎么样，值不值得采用并不知道，有小伙伴比较了解的可以指点一二啊），后台调用多个接口使用多线程处理，并且将返回的数据用spring websocket实时推送到页面，后台将数据保存入库&lt;/p&gt;
&lt;h4 id=&quot;涉及知识点&quot;&gt;&lt;a href=&quot;#涉及知识点&quot; class=&quot;headerlink&quot; title=&quot;涉及知识点:&quot;&gt;&lt;/a&gt;涉及知识点:&lt;/h4&gt;&lt;p&gt;多线程，线程安全，spring websocket&lt;/p&gt;
&lt;p&gt;spring websocket 在spring官网有完整的demo，这里就不赘述了，这里只简单的理下思路。&lt;br&gt;
    
    </summary>
    
      <category term="优化" scheme="http://www.zhoun.site/categories/%E4%BC%98%E5%8C%96/"/>
    
    
      <category term="websocket 后台数据实时推送" scheme="http://www.zhoun.site/tags/websocket-%E5%90%8E%E5%8F%B0%E6%95%B0%E6%8D%AE%E5%AE%9E%E6%97%B6%E6%8E%A8%E9%80%81/"/>
    
  </entry>
  
  <entry>
    <title>fastdfs单机安装部署全过程(阿里云centos环境)</title>
    <link href="http://www.zhoun.site/2018/02/08/fastdfs/"/>
    <id>http://www.zhoun.site/2018/02/08/fastdfs/</id>
    <published>2018-02-08T10:50:53.000Z</published>
    <updated>2018-02-08T12:18:55.449Z</updated>
    
    <content type="html"><![CDATA[<p>本篇总结一下fastdfs在阿里云centos7下的安装。<br>网上有很多安装的教程，但都千篇一律又不完整，按其安装的最终都不能通过浏览器访问到文件，最近搞了几天弄成功了所以总结下，方便自己忘记了也可以回头看看。下面开始</p><p>注意：阿里云centos7的防火墙是firewalld,网上都是iptables的，可以安装iptables，但可以直接用firewalld 相关命令开启防火墙并添加端口，阿里云放行还需添加安全组规则。</p><h2 id="依赖环境的安装"><a href="#依赖环境的安装" class="headerlink" title="依赖环境的安装"></a>依赖环境的安装</h2><pre><code>yum install make cmake gcc gcc-c++</code></pre><h4 id="安装libfatscommon-目录可自行选择创建"><a href="#安装libfatscommon-目录可自行选择创建" class="headerlink" title="安装libfatscommon (目录可自行选择创建)"></a>安装libfatscommon (目录可自行选择创建)</h4><pre><code>yum install -y unzip zipunzip libfastcommon-master.zip    cd libfastcommon-master   </code></pre><h2 id="创建数据存储目录"><a href="#创建数据存储目录" class="headerlink" title="创建数据存储目录"></a>创建数据存储目录</h2><p>   mkdir -p /export/fastdfs/{storage,tracker}<br>   创建后的目录为/export/fastdfs/storage,/export/fastdfs/tracker<br>   (上传文件后可到此查看)<br><a id="more"></a></p><h2 id="fastdfs安装配置"><a href="#fastdfs安装配置" class="headerlink" title="fastdfs安装配置"></a>fastdfs安装配置</h2><h4 id="下载"><a href="#下载" class="headerlink" title="下载"></a>下载</h4><pre><code>wget http://sourceforge.net/projects/fastdfs/files/FastDFS%20Server%20Source%20Code/FastDFS%20Server%20with%20PHP%20Extension%20Source%20Code%20V5.05/FastDFS_v5.05.tar.gz/download</code></pre><h4 id="解压"><a href="#解压" class="headerlink" title="解压"></a>解压</h4><pre><code>tar zxf download(download是wget下来后的文件名，解压后变成FastDfs)</code></pre><h4 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h4><pre><code>cd FastDfs./make &amp;&amp; ./make installcp -a conf/*.conf /etc/fdfs/ (复制配置文件到对应目录,后续配置的目录)cd /etc/fdfs/rm -rf *.samplechown -R fastdfs: /export/fastdfs</code></pre><h4 id="配置tracker"><a href="#配置tracker" class="headerlink" title="配置tracker"></a>配置tracker</h4><pre><code>vim /etc/fdfs/tracker.conf (修改配置文件)disabled=false  port=22122                   （默认端口）base_path=/export/fastdfs/tracker (自己创建的用于存放tracker的目录)</code></pre><p>（其余默认）<br>        开启防火墙22122端口并加入安全组<br>        systemctl start firewalld (开启防火墙)<br>        firewall-cmd –add-port=22122/tcp –permanent (添加端口)<br>        firewall-cmd –reload (更新防火墙)<br>        firewall-cmd –list-all (查看目前开放的端口)<br>        systemctl status firewalld (查看防火墙是否开启)</p><pre><code>启动trackerfdfs_tracker /etc/fdfs/trcker.conf start</code></pre><h4 id="配置storage-ip改成自己的"><a href="#配置storage-ip改成自己的" class="headerlink" title="配置storage (ip改成自己的)"></a>配置storage (ip改成自己的)</h4><pre><code>vim /etc/fdfs/storage.confdisabled=false                      # 启用配置文件port=23000     group_name=group1base_path=/export/fastdfs/storagestore_path0=/export/fastdfs/storagetracker_server=ip:22122http.server_port=80 (浏览器访问文件的端口)开启防火墙23000,80端口并加入安全组启动storagefdfs_storage /etc/fdfs/storage.conf start查看监听状态netstat -unltp | grep storage (LISTENING为成功)</code></pre><h4 id="配置client"><a href="#配置client" class="headerlink" title="配置client"></a>配置client</h4><pre><code>vim /etc/fdfs/client.confbase_path=/export/fastdfs/trackertracker_server=ip:22122</code></pre><h2 id="fastdfs-nginx-module安装配置"><a href="#fastdfs-nginx-module安装配置" class="headerlink" title="fastdfs-nginx-module安装配置"></a>fastdfs-nginx-module安装配置</h2><pre><code>wget http://sourceforge.net/projects/fastdfs/files/FastDFS%20Nginx%20Module%20Source%20Code/fastdfs-nginx-module_v1.16.tar.gz/downloadtar zxf download(download是你wget下来的文件名)cd fastdfs-nginx-module/srcvim conf   #更改如下， 去掉local，并指定lib64（64系统）CORE_INCS=&quot;$CORE_INCS /usr/include/fastdfs /usr/include/fastcommon/&quot;CORE_LIBS=&quot;$CORE_LIBS -L/usr/lib64 -lfastcommon -lfdfsclient&quot;复制mod_fastdfs.conf文件到上面配置的/etc/fdfs目录下cp mod_fastdfs.conf /etc/fdfs/vim mod_fastdfs.conf (修改配置)group_name=group1base_path=/export/fastdfs/storagestore_path0=/export/fastdfs/storagetracker_server=ip:22122  (ip是你本机的ip)url_have_group_name = true  (group前缀)</code></pre><h2 id="nginx安装配置-关联fastdfs-nginx-module"><a href="#nginx安装配置-关联fastdfs-nginx-module" class="headerlink" title="nginx安装配置(关联fastdfs-nginx-module)"></a>nginx安装配置(关联fastdfs-nginx-module)</h2><h4 id="nginx依赖安装"><a href="#nginx依赖安装" class="headerlink" title="nginx依赖安装"></a>nginx依赖安装</h4><pre><code>yum install gcc gcc-c++ make automake autoconf libtool pcre* zlib openssl openssl-devel</code></pre><h4 id="nginx安装"><a href="#nginx安装" class="headerlink" title="nginx安装"></a>nginx安装</h4><pre><code>wget http://nginx.org/download/nginx-1.8.0.tar.gztar zxf nginx-1.8.0.tar.gzcd nginx-1.8.0./configure --prefix=/opt/nginx --add-module=/usr/local/src/fastdfs-nginx-module/src (添加fastdfs-nginx-module模块，prefix路径可自行配置)make &amp;&amp; make install配置nginx.confcd /opt/nginx/conf (之前prefix指向的路径) location /group1/M00 {    root /export/fastdfs/storage/data; (文件存储路径)    ngx_fastdfs_module; }</code></pre><p><img src="/images/fastdfs1.png" alt="nginx配置界面" title="nginx跳转配置"></p><pre><code>重启nginx(重启后配置生效)./nginx -s reload</code></pre><h2 id="文件上传，浏览器访问测试"><a href="#文件上传，浏览器访问测试" class="headerlink" title="文件上传，浏览器访问测试"></a>文件上传，浏览器访问测试</h2><p>fdfs_test /etc/fdfs/client.conf upload test.txt(文件名)<br>上传成功返回路径<br><img src="/images/fastdfs2.png" alt="文件上传" title="文件上传"></p><p>浏览器进行访问</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;本篇总结一下fastdfs在阿里云centos7下的安装。&lt;br&gt;网上有很多安装的教程，但都千篇一律又不完整，按其安装的最终都不能通过浏览器访问到文件，最近搞了几天弄成功了所以总结下，方便自己忘记了也可以回头看看。下面开始&lt;/p&gt;
&lt;p&gt;注意：阿里云centos7的防火墙是firewalld,网上都是iptables的，可以安装iptables，但可以直接用firewalld 相关命令开启防火墙并添加端口，阿里云放行还需添加安全组规则。&lt;/p&gt;
&lt;h2 id=&quot;依赖环境的安装&quot;&gt;&lt;a href=&quot;#依赖环境的安装&quot; class=&quot;headerlink&quot; title=&quot;依赖环境的安装&quot;&gt;&lt;/a&gt;依赖环境的安装&lt;/h2&gt;&lt;pre&gt;&lt;code&gt;yum install make cmake gcc gcc-c++
&lt;/code&gt;&lt;/pre&gt;&lt;h4 id=&quot;安装libfatscommon-目录可自行选择创建&quot;&gt;&lt;a href=&quot;#安装libfatscommon-目录可自行选择创建&quot; class=&quot;headerlink&quot; title=&quot;安装libfatscommon (目录可自行选择创建)&quot;&gt;&lt;/a&gt;安装libfatscommon (目录可自行选择创建)&lt;/h4&gt;&lt;pre&gt;&lt;code&gt;yum install -y unzip zip
unzip libfastcommon-master.zip    
cd libfastcommon-master   
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&quot;创建数据存储目录&quot;&gt;&lt;a href=&quot;#创建数据存储目录&quot; class=&quot;headerlink&quot; title=&quot;创建数据存储目录&quot;&gt;&lt;/a&gt;创建数据存储目录&lt;/h2&gt;&lt;p&gt;   mkdir -p /export/fastdfs/{storage,tracker}&lt;br&gt;   创建后的目录为/export/fastdfs/storage,/export/fastdfs/tracker&lt;br&gt;   (上传文件后可到此查看)&lt;br&gt;
    
    </summary>
    
      <category term="fastdfs" scheme="http://www.zhoun.site/categories/fastdfs/"/>
    
    
      <category term="fastdfs安装" scheme="http://www.zhoun.site/tags/fastdfs%E5%AE%89%E8%A3%85/"/>
    
  </entry>
  
  <entry>
    <title>阿里云ECS服务器cenos7系统部署环境安装(tomcat,jdk,mysql等)</title>
    <link href="http://www.zhoun.site/2017/11/02/aliyun1/"/>
    <id>http://www.zhoun.site/2017/11/02/aliyun1/</id>
    <published>2017-11-02T08:06:28.000Z</published>
    <updated>2017-11-02T08:12:12.912Z</updated>
    
    <content type="html"><![CDATA[<p>在阿里云买了三年的ecs服务器，想后续搭建自己的网站，这边记录一下部署环境的安装过程,如果命令不熟练，可以自己在本地安装虚拟机试一下(可以看图形界面)，都一样的，ecs也是虚拟机</p><h4 id="jdk安装"><a href="#jdk安装" class="headerlink" title="jdk安装:"></a>jdk安装:</h4><pre><code>yum install -y lrzszrz执行上面的命令安装可进行本地传输文件，将本地下载好的jdk包传上去,解压tar-xzvf jdk-8u131-linux-x64.tar.gz 修改配置文件vi /etc/profile在文件末尾添加如下内容export JAVA_HOME=/usr/java/jdk1.8.0_45export PATH=$JAVA_HOME/bin:$PATHexport CLASSPATH=.:$JAVA_HOME/lib/dt.jar:$JAVA_HOME/lib/tools.jar移除jdk安装包rm -rf jdk-8u131-linux-x64.tar.gzsource /etc/profile使配置文件生效java -version查看 是否生效 </code></pre><a id="more"></a>    <h4 id="tomcat安装"><a href="#tomcat安装" class="headerlink" title="tomcat安装:"></a>tomcat安装:</h4><p>进入/usr/local目录,我这里安装的tomcat7版本</p><pre><code>cd /usr/localwget http://mirrors.tuna.tsinghua.edu.cn/apache/tomcat/tomcat-7/v7.0.82/bin/apache-tomcat-7.0.82.tar.gz (下载包)tar -zxf apache-tomcat-7.0.82.tar.gz (解压)mv apache-tomcat-7.0.82 tomcat (重命名)rm -rf apache-tomcat-7.0.82.tar.gz (移除安装包)</code></pre><p><img src="/images/ecs1.png" alt="图1" title="图1"></p><pre><code>ls (查看当前目录下的东西)cd tomcat/bin./catalina.sh (启动，这时候如果你没安装jdk什么的启动就会报错)</code></pre><p><img src="/images/ecs2.png" alt="图2" title="图2"></p><pre><code>export JAVA_HOME=/usr/java/jdk1.8.0_45export CATALINA_HOME=/usr/local/apache-tomcat-8.0.22 export PATH=$JAVA_HOME/bin:$PATH:$CATALINA_HOME/libexport CLASSPATH=.:$JAVA_HOME/lib/dt.jar:$JAVA_HOME/lib/tools.jar:$CATALINA_HOME/bin这样就可以启动了</code></pre><p><img src="/images/ecs3.png" alt="图3" title="图3"></p><p>如果不能通过浏览器访问8080,则需要设置阿里云服务器的安全组规则</p><h4 id="mysql安装"><a href="#mysql安装" class="headerlink" title="mysql安装():"></a>mysql安装():</h4><pre><code>rpm qa|grep MYSQL是否已安装其他版本的mysql(有的话用命令删除)创建MariaDB.repo:sudo vi /etc/yum.repos.d/Mariadb.repo将以下文件中的字段添加到MariaDB.repo文件中:#MariaDB 10.1 CentOS repository list - created 2016-12-01 03:36 UTC#http://downloads.mariadb.org/mariadb/repositories/[mariadb]name = MariaDBbaseurl = http://yum.mariadb.org/10.1/centos7-amd64gpgkey=https://yum.mariadb.org/RPM-GPG-KEY-MariaDBgpgcheck=1##### yum安装MariaDBsudo yum -y install MariaDB-server MariaDB-client安装需要一段时间systemctl start mysql.service           /启动mariaDB服务配置MariaDB服务mysql_secure_installation图mysql -u root -p 登录exit; 可退出配置mysql:1:字符集设置vi /etc/my.cnf在文件末加入以下内容[mysql]default-character-set =utf82:远程连接设置grant all privileges on *.* to root@&apos;%&apos;identified by &apos;password&apos;;(表权限赋予所有ip地址的root用户) 这样就可以远程连接了</code></pre>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在阿里云买了三年的ecs服务器，想后续搭建自己的网站，这边记录一下部署环境的安装过程,如果命令不熟练，可以自己在本地安装虚拟机试一下(可以看图形界面)，都一样的，ecs也是虚拟机&lt;/p&gt;
&lt;h4 id=&quot;jdk安装&quot;&gt;&lt;a href=&quot;#jdk安装&quot; class=&quot;headerlink&quot; title=&quot;jdk安装:&quot;&gt;&lt;/a&gt;jdk安装:&lt;/h4&gt;&lt;pre&gt;&lt;code&gt;yum install -y lrzsz
rz
执行上面的命令安装可进行本地传输文件，将本地下载好的jdk包传上去,解压
tar-xzvf jdk-8u131-linux-x64.tar.gz 
修改配置文件
vi /etc/profile
在文件末尾添加如下内容
export JAVA_HOME=/usr/java/jdk1.8.0_45
export PATH=$JAVA_HOME/bin:$PATH
export CLASSPATH=.:$JAVA_HOME/lib/dt.jar:$JAVA_HOME/lib/tools.jar
移除jdk安装包
rm -rf jdk-8u131-linux-x64.tar.gz
source /etc/profile
使配置文件生效
java -version查看 是否生效 
&lt;/code&gt;&lt;/pre&gt;
    
    </summary>
    
      <category term="阿里云部署环境" scheme="http://www.zhoun.site/categories/%E9%98%BF%E9%87%8C%E4%BA%91%E9%83%A8%E7%BD%B2%E7%8E%AF%E5%A2%83/"/>
    
    
      <category term="阿里云centos7 环境安装" scheme="http://www.zhoun.site/tags/%E9%98%BF%E9%87%8C%E4%BA%91centos7-%E7%8E%AF%E5%A2%83%E5%AE%89%E8%A3%85/"/>
    
  </entry>
  
  <entry>
    <title>ELASTICSEARCH:项目整合连接报错receiveTransportException:fail to getnode解决</title>
    <link href="http://www.zhoun.site/2017/09/30/elasticsearch8/"/>
    <id>http://www.zhoun.site/2017/09/30/elasticsearch8/</id>
    <published>2017-09-30T02:43:09.000Z</published>
    <updated>2017-09-30T03:09:46.114Z</updated>
    
    <content type="html"><![CDATA[<p>windows环境,之前项目连整合连接一直报这个错误，而且spring官方文档上也没说这个端口是什么端口，疑惑了很久，今天在大神的帮助下总算解决了(非常感谢大神)，记录一下</p><h4 id="错误信息截图"><a href="#错误信息截图" class="headerlink" title="错误信息截图:"></a>错误信息截图:</h4><p><img src="/images/receivetimeoutexception.png" alt="连接错误信息" title="连接错误信息"><br><a id="more"></a></p><h4 id="解决"><a href="#解决" class="headerlink" title="解决:"></a>解决:</h4><pre><code>spring.data.elasticsearch.cluster-nodes=localhost:9300项目中上面这条配置的端口要与配置文件中的transport.tcp.port: 9501对应，配置这个表明是使用TransportClient来连接elasticsearch的。</code></pre><p>最后再次感谢大神的帮助让我解决了疑惑好几天的问题。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;windows环境,之前项目连整合连接一直报这个错误，而且spring官方文档上也没说这个端口是什么端口，疑惑了很久，今天在大神的帮助下总算解决了(非常感谢大神)，记录一下&lt;/p&gt;
&lt;h4 id=&quot;错误信息截图&quot;&gt;&lt;a href=&quot;#错误信息截图&quot; class=&quot;headerlink&quot; title=&quot;错误信息截图:&quot;&gt;&lt;/a&gt;错误信息截图:&lt;/h4&gt;&lt;p&gt;&lt;img src=&quot;/images/receivetimeoutexception.png&quot; alt=&quot;连接错误信息&quot; title=&quot;连接错误信息&quot;&gt;&lt;br&gt;
    
    </summary>
    
      <category term="elasticsearch" scheme="http://www.zhoun.site/categories/elasticsearch/"/>
    
    
      <category term="elasticsearch" scheme="http://www.zhoun.site/tags/elasticsearch/"/>
    
  </entry>
  
  <entry>
    <title>ELASTICSEARCH:使用restful api操作数据</title>
    <link href="http://www.zhoun.site/2017/09/28/elasticsearch7/"/>
    <id>http://www.zhoun.site/2017/09/28/elasticsearch7/</id>
    <published>2017-09-28T01:59:23.000Z</published>
    <updated>2017-09-28T02:02:49.571Z</updated>
    
    <content type="html"><![CDATA[<p>windows环境,我这里用git客户端操作curl命令(因为格式之类的问题，cmd会报错，git可以直接复制官网的例子进行操作学习)<br><a href="https://www.elastic.co/guide/en/elasticsearch/reference/2.3/docs-index_.html" target="_blank" rel="external">https://www.elastic.co/guide/en/elasticsearch/reference/2.3/docs-index_.html</a></p><h4 id="添加数据"><a href="#添加数据" class="headerlink" title="添加数据:"></a>添加数据:</h4><pre><code>$ curl -XPUT &apos;http://localhost:9200/twitter/tweet/1&apos; -d &apos;{    &quot;user&quot; : &quot;kimchy&quot;,    &quot;post_date&quot; : &quot;2009-11-15T14:12:12&quot;,    &quot;message&quot; : &quot;trying out Elasticsearch&quot;}&apos;</code></pre><a id="more"></a>     <h4 id="修改数据"><a href="#修改数据" class="headerlink" title="修改数据:"></a>修改数据:</h4><p>(更新是先获取文档，删除旧文件，更改_source属性，把它当做新的文件来索引,通过_update的一个脚本来实现)<br>    curl -XPOST ‘localhost:9200/test/type1/1/_update’ -d ‘{<br>        “script” : {<br>            “inline”: “ctx._source.counter += count”,<br>            “params” : {<br>                “count” : 4<br>            }<br>        }<br>    }’</p><h4 id="删除数据"><a href="#删除数据" class="headerlink" title="删除数据:"></a>删除数据:</h4><pre><code>curl -XDELETE &apos;http://localhost:9200/twitter/tweet/1&apos;</code></pre><h4 id="检索数据"><a href="#检索数据" class="headerlink" title="检索数据:"></a>检索数据:</h4><pre><code>curl -XGET &apos;http://localhost:9200/twitter/tweet/1&apos;</code></pre>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;windows环境,我这里用git客户端操作curl命令(因为格式之类的问题，cmd会报错，git可以直接复制官网的例子进行操作学习)&lt;br&gt;&lt;a href=&quot;https://www.elastic.co/guide/en/elasticsearch/reference/2.3/docs-index_.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://www.elastic.co/guide/en/elasticsearch/reference/2.3/docs-index_.html&lt;/a&gt;&lt;/p&gt;
&lt;h4 id=&quot;添加数据&quot;&gt;&lt;a href=&quot;#添加数据&quot; class=&quot;headerlink&quot; title=&quot;添加数据:&quot;&gt;&lt;/a&gt;添加数据:&lt;/h4&gt;&lt;pre&gt;&lt;code&gt;$ curl -XPUT &amp;apos;http://localhost:9200/twitter/tweet/1&amp;apos; -d &amp;apos;{
    &amp;quot;user&amp;quot; : &amp;quot;kimchy&amp;quot;,
    &amp;quot;post_date&amp;quot; : &amp;quot;2009-11-15T14:12:12&amp;quot;,
    &amp;quot;message&amp;quot; : &amp;quot;trying out Elasticsearch&amp;quot;
}&amp;apos;
&lt;/code&gt;&lt;/pre&gt;
    
    </summary>
    
      <category term="elasticsearch" scheme="http://www.zhoun.site/categories/elasticsearch/"/>
    
    
      <category term="elasticsearch" scheme="http://www.zhoun.site/tags/elasticsearch/"/>
    
  </entry>
  
  <entry>
    <title>windows下将elasticsearch安装为系统服务</title>
    <link href="http://www.zhoun.site/2017/09/27/elasticsearch6/"/>
    <id>http://www.zhoun.site/2017/09/27/elasticsearch6/</id>
    <published>2017-09-27T06:25:42.000Z</published>
    <updated>2017-09-27T06:28:45.001Z</updated>
    
    <content type="html"><![CDATA[<p>如何将elasticsearch安装为系统服务，受限于条件需要在本地windows环境学习elasticsearch(linux下的安装可以自行百度)</p><h4 id="step1"><a href="#step1" class="headerlink" title="step1:"></a>step1:</h4><pre><code>cmd到bin目录下,执行 service.bat install执行成功后就可以在系统服务里找到elasticsearch的选项了，如下图</code></pre><p><img src="/images/es.png" alt="系统服务界面" title="系统服务界面"><br><a id="more"></a><br>    在同目录下执行service.bat 可启动服务</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;如何将elasticsearch安装为系统服务，受限于条件需要在本地windows环境学习elasticsearch(linux下的安装可以自行百度)&lt;/p&gt;
&lt;h4 id=&quot;step1&quot;&gt;&lt;a href=&quot;#step1&quot; class=&quot;headerlink&quot; title=&quot;step1:&quot;&gt;&lt;/a&gt;step1:&lt;/h4&gt;&lt;pre&gt;&lt;code&gt;cmd到bin目录下,执行 service.bat install
执行成功后就可以在系统服务里找到elasticsearch的选项了，如下图
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;img src=&quot;/images/es.png&quot; alt=&quot;系统服务界面&quot; title=&quot;系统服务界面&quot;&gt;&lt;br&gt;
    
    </summary>
    
      <category term="elasticsearch" scheme="http://www.zhoun.site/categories/elasticsearch/"/>
    
    
      <category term="elasticsearch" scheme="http://www.zhoun.site/tags/elasticsearch/"/>
    
  </entry>
  
  <entry>
    <title>WINDOWS环境下安装elasticsearch集群</title>
    <link href="http://www.zhoun.site/2017/09/26/elasticsearch5/"/>
    <id>http://www.zhoun.site/2017/09/26/elasticsearch5/</id>
    <published>2017-09-26T10:02:29.000Z</published>
    <updated>2017-09-26T10:05:19.848Z</updated>
    
    <content type="html"><![CDATA[<p>限于硬件条件，在windows安装集群，是为了学习elastisearch<br>以下都在本机试过了并且记录了会遇到的问题</p><h4 id="step1"><a href="#step1" class="headerlink" title="step1:"></a>step1:</h4><pre><code>再复制一份elasticsearch文件并且重命名。</code></pre><h4 id="step2"><a href="#step2" class="headerlink" title="step2:"></a>step2:</h4><pre><code>修改elasticsearch配置文件cluster.name: elasticsearchnode.name: node-1network.host: 192.168.3.50http.port: 9201 (同一机器不能一样)network.publish_host: 192.168.3.50(本机地址)discovery.zen.ping.unicast.hosts: [&quot;192.168.3.50:9500&quot;] (通信地址写当前的)transport.tcp.port: 9501 (通信端口同一机器不能一样)</code></pre><a id="more"></a>     <pre><code>cluster.name: elasticsearchnode.name: node-2network.host: 192.168.3.50http.port: 9201 (同一机器不能一样)network.publish_host: 192.168.3.50(本机地址)discovery.zen.ping.unicast.hosts: [&quot;192.168.3.50:9500&quot;,&quot;192.168.3.50:9501&quot;] (通信地址添加前面的节点)transport.tcp.port: 9501 (通信端口同一机器不能一样)</code></pre><h4 id="step3-集群搭建成功"><a href="#step3-集群搭建成功" class="headerlink" title="step3:集群搭建成功"></a>step3:集群搭建成功</h4><pre><code>启动节点1启动节点2成功后界面会显示节点added的信息，如下图</code></pre><p><img src="/images/jd1.png" alt="节点1" title="节点1"><br><img src="/images/jd2.png" alt="节点2" title="节点2"></p><h4 id="可能会遇到的问题："><a href="#可能会遇到的问题：" class="headerlink" title="可能会遇到的问题："></a>可能会遇到的问题：</h4><pre><code>如果启动后cmd窗口自动关闭了，可能是端口问题，修改一下通信端口，如:9500</code></pre>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;限于硬件条件，在windows安装集群，是为了学习elastisearch&lt;br&gt;以下都在本机试过了并且记录了会遇到的问题&lt;/p&gt;
&lt;h4 id=&quot;step1&quot;&gt;&lt;a href=&quot;#step1&quot; class=&quot;headerlink&quot; title=&quot;step1:&quot;&gt;&lt;/a&gt;step1:&lt;/h4&gt;&lt;pre&gt;&lt;code&gt;再复制一份elasticsearch文件并且重命名。
&lt;/code&gt;&lt;/pre&gt;&lt;h4 id=&quot;step2&quot;&gt;&lt;a href=&quot;#step2&quot; class=&quot;headerlink&quot; title=&quot;step2:&quot;&gt;&lt;/a&gt;step2:&lt;/h4&gt;&lt;pre&gt;&lt;code&gt;修改elasticsearch配置文件
cluster.name: elasticsearch
node.name: node-1
network.host: 192.168.3.50
http.port: 9201 (同一机器不能一样)
network.publish_host: 192.168.3.50(本机地址)
discovery.zen.ping.unicast.hosts: [&amp;quot;192.168.3.50:9500&amp;quot;] (通信地址写当前的)
transport.tcp.port: 9501 (通信端口同一机器不能一样)
&lt;/code&gt;&lt;/pre&gt;
    
    </summary>
    
      <category term="elasticsearch" scheme="http://www.zhoun.site/categories/elasticsearch/"/>
    
    
      <category term="elasticsearch" scheme="http://www.zhoun.site/tags/elasticsearch/"/>
    
  </entry>
  
  <entry>
    <title>WINDOWS环境下安装curl</title>
    <link href="http://www.zhoun.site/2017/09/26/curl/"/>
    <id>http://www.zhoun.site/2017/09/26/curl/</id>
    <published>2017-09-26T08:24:12.000Z</published>
    <updated>2017-09-26T08:37:13.140Z</updated>
    
    <content type="html"><![CDATA[<p>因为学习elasticsearch需要使用curl命令，因为电脑是windows系统，配置原因使用虚拟机会卡爆，所以需要在windows环境下安装以供之后的学习使用,需要的朋友可以mark</p><h4 id="curl下载地址"><a href="#curl下载地址" class="headerlink" title="curl下载地址:"></a>curl下载地址:</h4><pre><code>https://curl.haxx.se/download.html</code></pre><p>这里我下载的版本是7.53.1，如图<br><img src="/images/bb.png" alt="版本" title="版本"></p><a id="more"></a><p>下载后解压到指定目录</p><h4 id="环境变量配置"><a href="#环境变量配置" class="headerlink" title="环境变量配置"></a>环境变量配置</h4><pre><code>如图：</code></pre><p><img src="/images/hjbl1.png" alt="环境变量配置1" title="环境变量配置1"><br><img src="/images/hjbl2.png" alt="环境变量配置2" title="环境变量配置2"></p><p>配置好环境变量后重启，打开命令窗口用curl命令进行验证<br><img src="/images/hjbl2.png" alt="安装成功" title="安装成功">    </p><p>其实我发现安装curl之前git客户端是可以使用curl命令的。。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;因为学习elasticsearch需要使用curl命令，因为电脑是windows系统，配置原因使用虚拟机会卡爆，所以需要在windows环境下安装以供之后的学习使用,需要的朋友可以mark&lt;/p&gt;
&lt;h4 id=&quot;curl下载地址&quot;&gt;&lt;a href=&quot;#curl下载地址&quot; class=&quot;headerlink&quot; title=&quot;curl下载地址:&quot;&gt;&lt;/a&gt;curl下载地址:&lt;/h4&gt;&lt;pre&gt;&lt;code&gt;https://curl.haxx.se/download.html
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;这里我下载的版本是7.53.1，如图&lt;br&gt;&lt;img src=&quot;/images/bb.png&quot; alt=&quot;版本&quot; title=&quot;版本&quot;&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="elasticsearch" scheme="http://www.zhoun.site/categories/elasticsearch/"/>
    
    
      <category term="elasticsearch" scheme="http://www.zhoun.site/tags/elasticsearch/"/>
    
  </entry>
  
  <entry>
    <title>elasticsearch2.3.2启动报错：ReceiveTimeOutTransportException解决</title>
    <link href="http://www.zhoun.site/2017/09/26/elasticsearch4/"/>
    <id>http://www.zhoun.site/2017/09/26/elasticsearch4/</id>
    <published>2017-09-26T02:58:29.000Z</published>
    <updated>2017-09-26T02:59:42.084Z</updated>
    
    <content type="html"><![CDATA[<p>这几天一直在搞elasticsearch安装连接的各种问题，各种坑，使用要及其注意版本问题，版本不一样出现的问题不一样，这个错误在5.x版本中就不会出现</p><p><img src="/images/cc.png" alt="启动报错界面" title="启动报错界面"></p><h4 id="解决"><a href="#解决" class="headerlink" title="解决:"></a>解决:</h4><pre><code>修改配置文件，显示指定network.publish_host(ip根据自己的来)：#network.publish_host: 192.168.3.50#discovery.zen.ping.unicast.hosts: [&quot;hosts&quot;]</code></pre><p>修改后就可以启动成功了<br><a id="more"></a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;这几天一直在搞elasticsearch安装连接的各种问题，各种坑，使用要及其注意版本问题，版本不一样出现的问题不一样，这个错误在5.x版本中就不会出现&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/images/cc.png&quot; alt=&quot;启动报错界面&quot; title=&quot;启动报错界面&quot;&gt;&lt;/p&gt;
&lt;h4 id=&quot;解决&quot;&gt;&lt;a href=&quot;#解决&quot; class=&quot;headerlink&quot; title=&quot;解决:&quot;&gt;&lt;/a&gt;解决:&lt;/h4&gt;&lt;pre&gt;&lt;code&gt;修改配置文件，显示指定network.publish_host(ip根据自己的来)：
#network.publish_host: 192.168.3.50
#discovery.zen.ping.unicast.hosts: [&amp;quot;hosts&amp;quot;]
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;修改后就可以启动成功了&lt;br&gt;
    
    </summary>
    
      <category term="elasticsearch" scheme="http://www.zhoun.site/categories/elasticsearch/"/>
    
    
      <category term="elasticsearch" scheme="http://www.zhoun.site/tags/elasticsearch/"/>
    
  </entry>
  
  <entry>
    <title>elasticsearch2.3.2在windows环境中安装head插件</title>
    <link href="http://www.zhoun.site/2017/09/25/elasticsearch3/"/>
    <id>http://www.zhoun.site/2017/09/25/elasticsearch3/</id>
    <published>2017-09-25T07:25:45.000Z</published>
    <updated>2017-09-25T07:32:29.780Z</updated>
    
    <content type="html"><![CDATA[<p>这几天本地项目连接elasticsearch一直连不上有点烦躁啊。head插件安装之前那篇文章也有记录，但这个不太一样(和版本也有关系)，之前百度的一些都是说plugin -install,没有这个命令，plugin install才对。</p><h4 id="安装"><a href="#安装" class="headerlink" title="安装:"></a>安装:</h4><pre><code>进入到elasticsearch安装目录，进入bin目录执行安装命令即可：plugin install mobz/elasticsearch-head </code></pre><p><img src="/images/4.png" alt="head插件启动成功界面" title="head插件安装界面"><br><a id="more"></a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;这几天本地项目连接elasticsearch一直连不上有点烦躁啊。head插件安装之前那篇文章也有记录，但这个不太一样(和版本也有关系)，之前百度的一些都是说plugin -install,没有这个命令，plugin install才对。&lt;/p&gt;
&lt;h4 id=&quot;安装&quot;&gt;&lt;a href=&quot;#安装&quot; class=&quot;headerlink&quot; title=&quot;安装:&quot;&gt;&lt;/a&gt;安装:&lt;/h4&gt;&lt;pre&gt;&lt;code&gt;进入到elasticsearch安装目录，进入bin目录执行安装命令即可：
plugin install mobz/elasticsearch-head 
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;img src=&quot;/images/4.png&quot; alt=&quot;head插件启动成功界面&quot; title=&quot;head插件安装界面&quot;&gt;&lt;br&gt;
    
    </summary>
    
      <category term="elasticsearch" scheme="http://www.zhoun.site/categories/elasticsearch/"/>
    
    
      <category term="elasticsearch" scheme="http://www.zhoun.site/tags/elasticsearch/"/>
    
  </entry>
  
  <entry>
    <title>elasticsearch在linux环境中安装遇到的问题及解决方法</title>
    <link href="http://www.zhoun.site/2017/09/21/elasticsearch2/"/>
    <id>http://www.zhoun.site/2017/09/21/elasticsearch2/</id>
    <published>2017-09-21T08:29:13.000Z</published>
    <updated>2017-09-22T02:23:55.315Z</updated>
    
    <content type="html"><![CDATA[<p>昨天写了再windows环境中安装elasticsearh的文章，在使用中可能依然会遇到一些问题。今天这篇记录一下在linux环境中安装启动遇到的一些错误。我的系统是centos7</p><h4 id="错误1"><a href="#错误1" class="headerlink" title="错误1:"></a>错误1:</h4><pre><code>root用户启动报错，切换成非root用户启动</code></pre><h4 id="错误2"><a href="#错误2" class="headerlink" title="错误2:"></a>错误2:</h4><pre><code>Could not register mbeans java.security.AccessControlException解决方法：切换之后要把elasticsearch文件的所有权改成当前用户，命令如下(zhoun为当前用户名)：chown -R zhoun 目录名/</code></pre><a id="more"></a><h4 id="错误3"><a href="#错误3" class="headerlink" title="错误3:"></a>错误3:</h4><pre><code>BindTransportException[Failed to bind to [9300-9400]]解决犯法：修改/ect/elasticsearch/elasticsearch.yml配置文件，例如:127.0.0.1</code></pre><h4 id="错误4"><a href="#错误4" class="headerlink" title="错误4:"></a>错误4:</h4><pre><code>max virtual memory areas vm.max_map_count [65530] is too low, increase to at least [262144]解决方法:切换到root用户执行如下命令：echo &quot;vm.max_map_count=262144&quot; &gt;&gt;/etc/sysctl.conf修改后需重启才会生效</code></pre><h4 id="错误5："><a href="#错误5：" class="headerlink" title="错误5："></a>错误5：</h4><pre><code>bootstrap checks failed max file descriptors [65535] for elasticsearch process likely too low, increase to at least [65536]解决方法：切换到root用户，修改limits.conf配置文件，保存后记得重启(这个错误试了好久)vi /etc/security/limits.conf 添加如下内容:* soft nofile 65536* hard nofile 131072* soft nproc 2048* hard nproc 4096</code></pre><h6 id="解决了上面几个错误后elasticsearch成功在虚拟机中启动了-可能环境不一样遇到的错误也不一样，我这里只把我遇到的记录整理了"><a href="#解决了上面几个错误后elasticsearch成功在虚拟机中启动了-可能环境不一样遇到的错误也不一样，我这里只把我遇到的记录整理了" class="headerlink" title="解决了上面几个错误后elasticsearch成功在虚拟机中启动了(可能环境不一样遇到的错误也不一样，我这里只把我遇到的记录整理了)"></a>解决了上面几个错误后elasticsearch成功在虚拟机中启动了(可能环境不一样遇到的错误也不一样，我这里只把我遇到的记录整理了)</h6>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;昨天写了再windows环境中安装elasticsearh的文章，在使用中可能依然会遇到一些问题。今天这篇记录一下在linux环境中安装启动遇到的一些错误。我的系统是centos7&lt;/p&gt;
&lt;h4 id=&quot;错误1&quot;&gt;&lt;a href=&quot;#错误1&quot; class=&quot;headerlink&quot; title=&quot;错误1:&quot;&gt;&lt;/a&gt;错误1:&lt;/h4&gt;&lt;pre&gt;&lt;code&gt;root用户启动报错，切换成非root用户启动
&lt;/code&gt;&lt;/pre&gt;&lt;h4 id=&quot;错误2&quot;&gt;&lt;a href=&quot;#错误2&quot; class=&quot;headerlink&quot; title=&quot;错误2:&quot;&gt;&lt;/a&gt;错误2:&lt;/h4&gt;&lt;pre&gt;&lt;code&gt;Could not register mbeans java.security.AccessControlException
解决方法：切换之后要把elasticsearch文件的所有权改成当前用户，命令如下(zhoun为当前用户名)：
chown -R zhoun 目录名/
&lt;/code&gt;&lt;/pre&gt;
    
    </summary>
    
      <category term="elasticsearch" scheme="http://www.zhoun.site/categories/elasticsearch/"/>
    
    
      <category term="elasticsearch" scheme="http://www.zhoun.site/tags/elasticsearch/"/>
    
  </entry>
  
  <entry>
    <title>elasticsearch及head插件在windows环境下的安装</title>
    <link href="http://www.zhoun.site/2017/09/20/elasticsearch1/"/>
    <id>http://www.zhoun.site/2017/09/20/elasticsearch1/</id>
    <published>2017-09-20T09:57:28.000Z</published>
    <updated>2017-09-22T02:27:40.666Z</updated>
    
    <content type="html"><![CDATA[<p>最近在学习使用elasticsearch,但是没有linux环境，所以在网上搜集了各种资料后成功在本地windows系统下安装了，简单总结下。</p><h2 id="elasticsearch的安装"><a href="#elasticsearch的安装" class="headerlink" title="elasticsearch的安装"></a>elasticsearch的安装</h2><ul><li>elasticsearch的安装比较简单，直接去官网下载就可以，解压。执行bin文件下的bat文件即可启动，附上elasticsearch启动成功的界面。<br><img src="/images/1.png" alt="启动成功界面" title="elasticsearch成功启动界面"></li></ul><h2 id="head插件的安装"><a href="#head插件的安装" class="headerlink" title="head插件的安装"></a>head插件的安装</h2><a id="more"></a><ul><li>这里要用到node.js,下面需要用npm指令安装插件，百度一下安装即可。</li><li>安装grunt,head插件是通过grunt启动的。<br>路径切换到安装的node.js目录下，如：D:\nodejs,执行以下命令(如果你安装了git,可以直接在目录下右键git bash打开窗口,比cmd窗口要美观一些)<br>npm install -g grunt-cli<br>安装完成后用grunt -verion检查是否安装成功<br><img src="/images/2.png" alt="grunt安装界面" title="grunt安装界面"></li><li>用git下载head插件<br>git clone git://github.com/mobz/elasticsearch-head.git<h4 id="修改head源码："><a href="#修改head源码：" class="headerlink" title="修改head源码："></a>修改head源码：</h4>  – 因为head插件的版本是2.6的，直接执行有很多限制，需要修改接个地方<br>  目录：head/Gruntfile.js：<br>connect: {<br>&emsp;&emsp;server: {<br>   &emsp;&emsp;options: {<pre><code> &amp;emsp;&amp;emsp; port: 9100, &amp;emsp;&amp;emsp;hostname: &apos;*&apos;,&amp;emsp;&amp;emsp; base: &apos;.&apos;, &amp;emsp;&amp;emsp;keepalive: true</code></pre>   &emsp;&emsp;}<br>&emsp;&emsp;}<br>}<br>增加hostname属性，设置为*<h4 id="修改链接地址："><a href="#修改链接地址：" class="headerlink" title="修改链接地址："></a>修改链接地址：</h4>   目录：head/_site/app.js<br>   this.base_uri = this.config.base_uri || this.prefs.get(“app-base_uri”) ||”<a href="http://localhost:9200" target="_blank" rel="external">http://localhost:9200</a>“;<br>   把localhost修改成你es的服务器地址，如：<br>   this.base_uri = this.config.base_uri || this.prefs.get(“app-base_uri”) ||”<a href="http://10.10.10.10:9200" target="_blank" rel="external">http://10.10.10.10:9200</a>“;</li></ul><h4 id="运行head"><a href="#运行head" class="headerlink" title="运行head"></a>运行head</h4><pre><code>修改elasticsearch的配置文件 config/elasticsearch.yml(参数后面要有空格)：换个集群的名字，免得跟别人的集群混在一起cluster.name: es-5.0-test换个节点名字node.name: node-101修改一下ES的监听地址，这样别的机器也可以访问network.host: 0.0.0.0端口默认的就好http.port: 9200增加新的参数，这样head插件可以访问eshttp.cors.enabled: truehttp.cors.allow-origin: &quot;*&quot;</code></pre><h3 id="启动elasticsearch"><a href="#启动elasticsearch" class="headerlink" title="启动elasticsearch"></a>启动elasticsearch</h3><h3 id="然后在head源码目录中，执行npm-install-下载的包："><a href="#然后在head源码目录中，执行npm-install-下载的包：" class="headerlink" title="然后在head源码目录中，执行npm install 下载的包："></a>然后在head源码目录中，执行npm install 下载的包：</h3><pre><code>npm install (这个命令执行可能要等一会儿，运行报错就重新执行一遍直到完成)</code></pre><h3 id="启动head插件"><a href="#启动head插件" class="headerlink" title="启动head插件"></a>启动head插件</h3><pre><code>localhost:9100这样就可以访问head插件了</code></pre><p><img src="/images/3.png" alt="head插件启动成功界面" title="head插件启动界面"></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;最近在学习使用elasticsearch,但是没有linux环境，所以在网上搜集了各种资料后成功在本地windows系统下安装了，简单总结下。&lt;/p&gt;
&lt;h2 id=&quot;elasticsearch的安装&quot;&gt;&lt;a href=&quot;#elasticsearch的安装&quot; class=&quot;headerlink&quot; title=&quot;elasticsearch的安装&quot;&gt;&lt;/a&gt;elasticsearch的安装&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;elasticsearch的安装比较简单，直接去官网下载就可以，解压。执行bin文件下的bat文件即可启动，附上elasticsearch启动成功的界面。&lt;br&gt;&lt;img src=&quot;/images/1.png&quot; alt=&quot;启动成功界面&quot; title=&quot;elasticsearch成功启动界面&quot;&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;head插件的安装&quot;&gt;&lt;a href=&quot;#head插件的安装&quot; class=&quot;headerlink&quot; title=&quot;head插件的安装&quot;&gt;&lt;/a&gt;head插件的安装&lt;/h2&gt;
    
    </summary>
    
      <category term="elasticsearch" scheme="http://www.zhoun.site/categories/elasticsearch/"/>
    
    
      <category term="elasticsearch" scheme="http://www.zhoun.site/tags/elasticsearch/"/>
    
  </entry>
  
  <entry>
    <title>转一篇无意中在别人博客里发现的文章(如何尊重程序员，附上原文链接)</title>
    <link href="http://www.zhoun.site/2017/09/15/second/"/>
    <id>http://www.zhoun.site/2017/09/15/second/</id>
    <published>2017-09-15T09:20:03.000Z</published>
    <updated>2017-09-19T06:26:21.732Z</updated>
    
    <content type="html"><![CDATA[<h3 id="原文链接"><a href="#原文链接" class="headerlink" title="原文链接"></a>原文链接</h3><p><a href="http://www.yinwang.org/blog-cn/2015/03/03/how-to-respect-a-programmer" target="_blank" rel="external">http://www.yinwang.org/blog-cn/2015/03/03/how-to-respect-a-programmer</a></p><a id="more"></a>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;原文链接&quot;&gt;&lt;a href=&quot;#原文链接&quot; class=&quot;headerlink&quot; title=&quot;原文链接&quot;&gt;&lt;/a&gt;原文链接&lt;/h3&gt;&lt;p&gt;&lt;a href=&quot;http://www.yinwang.org/blog-cn/2015/03/03/how-to-respect-a-programmer&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://www.yinwang.org/blog-cn/2015/03/03/how-to-respect-a-programmer&lt;/a&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="杂谈" scheme="http://www.zhoun.site/categories/%E6%9D%82%E8%B0%88/"/>
    
    
      <category term="杂谈" scheme="http://www.zhoun.site/tags/%E6%9D%82%E8%B0%88/"/>
    
  </entry>
  
  <entry>
    <title>为什么创建此博客</title>
    <link href="http://www.zhoun.site/2017/09/08/first_create/"/>
    <id>http://www.zhoun.site/2017/09/08/first_create/</id>
    <published>2017-09-08T03:14:02.942Z</published>
    <updated>2017-09-15T09:53:27.884Z</updated>
    
    <content type="html"><![CDATA[<p>一直想着搭一个个人的技术博客。java开发两年多，之前也有整理记录遇到的一些问题或是技术资料，但线下保存来保存去没有一个归纳，不弄丢也很少去看了。所以打算打一个博客好好记录归纳一下</p><a id="more"></a>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;一直想着搭一个个人的技术博客。java开发两年多，之前也有整理记录遇到的一些问题或是技术资料，但线下保存来保存去没有一个归纳，不弄丢也很少去看了。所以打算打一个博客好好记录归纳一下&lt;/p&gt;
    
    </summary>
    
      <category term="杂谈" scheme="http://www.zhoun.site/categories/%E6%9D%82%E8%B0%88/"/>
    
    
      <category term="杂谈" scheme="http://www.zhoun.site/tags/%E6%9D%82%E8%B0%88/"/>
    
  </entry>
  
</feed>
